#!/usr/bin/env python
# coding: utf-8

import argparse, sys, os, inspect

class MyParser(argparse.ArgumentParser):
	def __init__(self):
		self.usage=\
"""
The accepted ways to run KUBE are:
----------------------------------
kube.py [ {-h,--help} ] 
kube.py {-v,--version}
kube.py <COMMAND> <OPTIONS>

Some <OPTIONS> are specific to some <COMMANDS>: 
-----------------------------------------------
kube.py clean   [-d {runs,results}] [-a APPS] [-n NETS] [-f FILESYS] [-s SYNTHS] [--since SINCE] [--to TO]
kube.py view    [-a APPS] [-n NETS] [-f FILESYS] [-s SYNTHS]
kube.py run     [-a APPS] [-n NETS] [-f FILESYS] [-s SYNTHS] [--log FILE]
kube.py refine  [-a APPS] [-n NETS] [-f FILESYS] [-s SYNTHS] [--since SINCE] [--to TO] [--log FILE]
kube.py probe {-t DIR [-m METRIC_NAME] [--since SINCE] [--to TO] , -b BASE_DIR [--target DIR]  [--since SINCE] [--to TO] }
"""		

		self.help=\
"""
Commands allowed in KUBE:
-------------------------
	{clean,view,run,refine,probe}
                        
optional arguments:
-------------------
  -h, --help            show this help message and exit
  -v, --version         show program's version number and exit
  --since SINCE         Option to set the initial time when needed
  --to TO               Option to set the end time when needed
  --log FILE            Print out log information to FILE  
  -d {run,results}      Option to specify which directory is to be cleaned
                        when the 'clean' command is used
  -a APPS               Option used to select which apps benchmark from the
                        config file will be processed. This option may accept
                        a comma-separated list if multiple apps need to be
                        selected. Use 'all' to select everything. It is
                        allowed in the following commands: 'run', 'view',
                        'refine'
  -n NETS               Option used to select which network benchmark from the
                        config file will be processed. This option may accept
                        a comma-separated list if multiple apps need to be
                        selected. Use 'all' to select everything. It is
                        allowed in the following commands: 'run', 'view',
                        'refine'
  -f FILESYS            Option used to select which filesystem benchmark from
                        the config file will be processed. This option may
                        accept a comma-separated list if multiple apps need to
                        be selected. Use 'all' to select everything. It is
                        allowed in the following commands: 'run', 'view',
                        'refine'
  -s SYNTHS             Option used to select which synthetic benchmark from
                        the config file will be processed. This option may
                        accept a comma-separated list if multiple apps need to
                        be selected. Use 'all' to select everything. It is
                        allowed in the following commands: 'run', 'view',
                        'refine'
  -t DIR                Option to be used with the 'probe' command to select the
                        time analysis. The value expected is the path to the
                        dir containing the post-processed runs
  -m METRIC_NAME        For the time analysis one or more metrics can be
                        selected using this option. A comma-separated list is
                        used for multiple metrics selection
  -b BASE_DIR           Option to be used with the 'probe' command to select the
                        box plot metrics graph analysis
  --target DIR          For the metrics graph analysis you may want to specify a dir 
                        path which contains one or many runs information to compare
                        against the base dir provided with -k option. This target dir
                        could be either a dir containing a single run for a specific
                        date or a dir containing several runs for various dates or a
                        dataset dir.
                            
"""

		super(MyParser,self).__init__(version="Kaust Unified Benchmark Environment (KUBE) version 0.97",usage=self.usage)
		
	def print_help(self):
		self.print_usage()
		print self.help
	
#####################################################################                                           
#
#	Main Program entry point
#
#####################################################################                                           
if __name__ == "__main__":

	# get the path to the current script
	cmd_folder = os.path.abspath(os.path.split(inspect.getfile( inspect.currentframe() ))[0])
	kube_lib_dir = cmd_folder + "/../lib/"

	# include KUBE.LIB_DIR in the module search path 
	if kube_lib_dir not in sys.path:
		sys.path.insert(0, kube_lib_dir)		

	# Import all the callbacks
	from kube.callbacks import  *
	
	parser = MyParser()

	if len(sys.argv)==1:
		parser.print_help()
		sys.exit(1)
 
	# Commands allowed by kube:
	parser.add_argument("command", choices=['clean','run','view','refine','probe'] , help='Commands allowed by KUBE')

	# options to set initial and end time when needed. The format is YYY-MM-DD
	parser.add_argument("--since", help='Option to set the initial time when needed.' )
	parser.add_argument("--to" ,   help='Option to set the end time when needed.')
	parser.add_argument("--log" ,  help='Append log information to file', dest='log')
	
	parser.add_argument("-d", choices=['runs','results'], help='Option to specify which directory is to be cleaned when the \'clean\' command is used' )

	parser.add_argument("-a" , help='Option to select which apps benchmark from the config file will be processed. This option may accept a comma-separated list if multiple apps need to be selected. Use \'all\' to select everything. It is allowed in the following commands: \'run\', \'view\', \'refine\'', dest='apps')
	parser.add_argument("-n" , help='Option to select which network benchmark from the config file will be processed. This option may accept a comma-separated list if multiple apps need to be selected. Use \'all\' to select everything. It is allowed in the following commands: \'run\', \'view\', \'refine\'', dest='nets')
	parser.add_argument("-f" , help='Option to select which filesystem benchmark from the config file will be processed. This option may accept a comma-separated list if multiple apps need to be selected. Use \'all\' to select everything. It is allowed in the following commands: \'run\', \'view\', \'refine\'', dest='filesys')
	parser.add_argument("-s" , help='Option used to select which synthetic benchmark from the config file will be processed. This option may accept a comma-separated list if multiple apps need to be selected. Use \'all\' to select everything. It is allowed in the following commands: \'run\', \'view\', \'refine\'', dest='synths')

	parser.add_argument("-t" , help='Option to be used with the \'probe\' command to select the time analysis. The value expected is the path to the dir containing the post-processed runs', dest='t')
	parser.add_argument("-m" , help='For the time analysis one or more metrics can be selected using this option. A comma-separated list is used for multiple metrics selection', dest='metric_name')

	parser.add_argument("-b" , help='Option to be used with the \'probe\' command to select the metrics graph analysis',dest='b')
	parser.add_argument("--target" , help='For the metrics graph analysis, select the target dir',dest='target')
	
	args = parser.parse_args()
	
	# Associating commands with options ... 	
	commands_opt={\
					'clean':['d','since','to','apps','nets','filesys','synths'] ,\
					'run':['apps','nets','filesys','synths','log'] ,\
					'view':['apps','nets','filesys','synths','log'],\
					'refine':['apps','nets','filesys','synths','since','to','log'] ,\
					'probe':['t','b'] ,\
	}
	# sub-options associated to options
	sub_opts= { 't':['metric_name','since','to'],'b':['target','since','to'] }
		
	# get which command was invoked
	command = args.command
	
	# all the options and the values given ...
	options_dict = dict([ (a,args.__dict__[a]) for a in args.__dict__.keys() if args.__dict__[a]!=None and a!='command'] ) 
	# Do the check if the command was invoked with the accepted options
	accepted_opts = commands_opt[command] 

	# 't' and 'b' can not be together with 'probe' command	
	if command == 'probe' and options_dict.keys().count('t')!=0  and options_dict.keys().count('b')!=0:
			print "-----------------------------------" 
			print "wrong options given to the command: \'" + command +"\'"
			print 
			parser.print_usage()
			sys.exit(1)
	
	# for every option given, check if it is in the list of accepted ones ...
	possible_invalid = []		
	for o in options_dict.keys():
		if not o in accepted_opts:
			possible_invalid.append(o)
			# Now check if this possible_invalid is in fact, a sub_option
			for ao in accepted_opts: 
				if ao in sub_opts.keys() and o in sub_opts[ao] and ao in options_dict.keys():
					del(possible_invalid[ possible_invalid.index(o) ])

	# Exit if any invalid option left		
	if len(possible_invalid)!=0 :
		print "-----------------------------------" 
		print "wrong options given to the command: \'" + command +"\'"
		print 
		parser.print_usage()
		sys.exit(1)

	callbacks = { \
					'clean': clean.start , \
					'run': run.start , \
					'view': view.start , \
					'refine': refine.start , \
					'probe': probe.start \
	}
	#From Now on all the options are valid.	
	callbacks[command](options_dict)